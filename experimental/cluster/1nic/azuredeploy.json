{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "solutionDeploymentName": {
      "type": "string",
      "metadata": {
        "description": "A unique name for this deployment."
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [ 2 ],
      "metadata": {
        "description": "The number of BIG-IP VEs that will be deployed in front of your application."
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_A4",
      "metadata": {
        "description": "The size of the Virtual Hardware Instance."
      },
      "allowedValues": [
        "Standard_A3",
        "Standard_A4",
        "Standard_D2",
        "Standard_D3",
        "Standard_D5",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D5_v2",
        "Standard_F2",
        "Standard_F4"
      ]
    },
    "imageName": {
      "defaultValue": "Good",
      "allowedValues": [
        "Good",
        "Better",
        "Best"
      ],
      "metadata": {
        "description": "F5 SKU (image) to deploy"
      },
      "type": "string"
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name to login to the BIG-IP VE."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password to login to the BIG-IP VE."
      }
    },
    "dnsLabel": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the BIG-IP VEs for management."
      }
    },
    "licenseKey1": {
      "type": "string",
      "defaultValue": "REQUIRED",
      "metadata": {
        "description": "The license token for the first F5 BIG-IP VE."
      }
    },
    "licenseKey2": {
      "type": "string",
      "defaultValue": "REQUIRED",
      "metadata": {
        "description": "The license token for the second F5 BIG-IP VE. This field is required when deploying two or more devices."
      }
    },
    "restrictedSrcAddress": {
      "type": "string",
      "defaultValue": "*",
      "metadata": {
        "description": "Restricts management access to a specific network or address. Enter a IP address or address range in CIDR notation, or asterisk for all sources."
      }
    },
    "tagValues": {
      "type": "object",
      "defaultValue": {
        "application": "APP",
        "environment": "ENV",
        "group": "GROUP",
        "owner": "OWNER",
        "cost": "COST"
      }
    }
  },
  "variables": {
    "f5CloudLibsTag": "release-2.0.0",
    "singleQuote": "'",
    "expectedHash": "8bb8ca730dce21dff6ec129a84bdb1689d703dc2b0227adcbd16757d5eeddd767fbe7d8d54cc147521ff2232bd42eebe78259069594d159eceb86a88ea137b73",
    "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set file_path [lindex $tmsh::argv 1]\n            set expected_hash ', variables('expectedHash'), '\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err {Hash does not match}\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature fc3P5jEvm5pd4qgKzkpOFr9bNGzZFjo9pK0diwqe/LgXwpLlNbpuqoFG6kMSRnzlpL54nrnVKREf6EsBwFoz6WbfDMD3QYZ4k3zkY7aiLzOdOcJh2wECZM5z1Yve/9Vjhmpp4zXo4varPVUkHBYzzr8FPQiR6E7Nv5xOJM2ocUv7E6/2nRfJs42J70bWmGL2ZEmk0xd6gt4tRdksU3LOXhsipuEZbPxJGOPMUZL7o5xNqzU3PvnqZrLFk37bOYMTrZxte51jP/gr3+TIsWNfQEX47nxUcSGN2HYY2Fu+aHDZtdnkYgn5WogQdUAjVVBXYlB38JpX1PFHt1AMrtSIFg==\n}', variables('singleQuote'))]",
    "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit\nfi\necho loaded verifyHash\necho verifying f5-cloud-libs.targ.gz\n/usr/bin/tmsh run cli script verifyHash /config/cloud/f5-cloud-libs.tar.gz\nif [ $? != 0 ]; then\necho f5-cloud-libs.tar.gz is not valid\nexit\nfi\necho verified f5-cloud-libs.tar.gz\necho expanding f5-cloud-libs.tar.gz\ntar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]",
    "location": "[resourceGroup().location]",
    "imageNameToLower": "[toLower(parameters('imageName'))]",
    "skuToUse": "[concat('f5-bigip-virtual-edition-', variables('imageNameToLower'),'-byol')]",
    "virtualNetworkName": "[concat(parameters('dnsLabel'),'-vnet')]",
    "vnetAddressPrefix": "10.10.0.0/16",
    "subnetName": "[concat(parameters('dnsLabel'),'-subNet')]",
    "subnetPrefix": "10.10.1.0/24",
    "ipAddress": "10.10.1.",
    "nicNamePrefix": "[concat(parameters('dnsLabel'),'-nic')]",
    "loadBalancerName": "[concat(parameters('dnsLabel'),'-alb')]",
    "availabilitySetName": "[concat(parameters('dnsLabel'),'-avset')]",
    "newStorageAccountName": "[concat(parameters('dnsLabel'),'stor')]",
    "deviceNamePrefix": "[concat(parameters('dnsLabel'),'-device')]",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(parameters('dnsLabel'),'-nsg'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "guiMgtID": "[concat(variables('lbID'),'/inboundNatRules/guimgt')]",
    "sshMgtID": "[concat(variables('lbID'),'/inboundNatRules/sshmgt')]",
    "publicIPID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('dnsLabel'))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]"
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('dnsLabel')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "PublicIPAddress",
        "application": "[parameters('tagValues').application]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]",
        "costCenter": "[parameters('tagValues').cost]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsLabel')]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "VirtualNetwork",
        "application": "[parameters('tagValues').application]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]",
        "costCenter": "[parameters('tagValues').cost]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNamePrefix'),copyindex())]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NetworkInterface",
        "application": "[parameters('tagValues').application]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]",
        "costCenter": "[parameters('tagValues').cost]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'),'/inboundNatRules/guimgt',copyindex())]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'),'/inboundNatRules/sshmgt',copyindex())]",
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('dnsLabel'),'-nsg')]"
      ],
      "copy": {
        "count": "[parameters('numberOfInstances')]",
        "name": "niccopy"
      },
      "properties": {
        "networkSecurityGroup": {
          "id": "[variables('nsgID')]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('ipAddress'),add(4,copyindex()))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'), '/inboundNatRules/', 'guimgt',copyIndex())]"
                },
                {
                  "id": "[concat(variables('lbID'), '/inboundNatRules/', 'sshmgt',copyIndex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(parameters('dnsLabel'), '-nsg')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NetworkSecurityGroup",
        "application": "[parameters('tagValues').application]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]",
        "costCenter": "[parameters('tagValues').cost]"
      },
      "properties": {
        "securityRules": [
          {
            "name": "mgmt_allow_443",
            "properties": {
              "description": "",
              "priority": 101,
              "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443",
              "protocol": "TCP",
              "direction": "Inbound",
              "access": "Allow"
            }
          },
          {
            "name": "ssh_allow_22",
            "properties": {
              "description": "",
              "priority": 102,
              "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "protocol": "TCP",
              "direction": "Inbound",
              "access": "Allow"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('dnsLabel'))]"
      ],
      "location": "[variables('location')]",
      "tags": {
        "displayName": "LoadBalancer",
        "application": "[parameters('tagValues').application]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]",
        "costCenter": "[parameters('tagValues').cost]"
      },
      "name": "[variables('loadBalancerName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/guimgt', copyIndex())]",
      "location": "[variables('location')]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8443)]",
        "backendPort": 443,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/sshmgt', copyIndex())]",
      "location": "[variables('location')]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8022)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-06-15",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "AvailabilitySet",
        "application": "[parameters('tagValues').application]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]",
        "costCenter": "[parameters('tagValues').cost]"
      },
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('deviceNamePrefix'),copyindex())]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "VirtualMachine",
        "application": "[parameters('tagValues').application]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]",
        "costCenter": "[parameters('tagValues').cost]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNamePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]"
      ],
      "copy": {
        "count": "[parameters('numberOfInstances')]",
        "name": "devicecopy"
      },
      "plan": {
           "name": "[variables('skuToUse')]",
           "publisher": "f5-networks",
           "product": "f5-big-ip"
       },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('deviceNamePrefix'),copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
              "publisher": "f5-networks",
              "offer": "f5-big-ip",
              "sku": "[variables('skuToUse')]",
              "version": "latest"
          },
          "osDisk": {
            "name": "[concat('osdisk',copyindex())]",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('newStorageAccountName'),'/osDisk',copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[concat(resourceId('Microsoft.Network/networkInterfaces',variables('nicNamePrefix')),copyindex())]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('newstorageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "name": "[variables('newStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "StorageAccount",
        "application": "[parameters('tagValues').application]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]",
        "costCenter": "[parameters('tagValues').cost]"
      },
      "apiVersion": "2015-06-15",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('deviceNamePrefix'),0,'/start')]",
      "apiVersion": "2016-03-30",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('deviceNamePrefix'),0)]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]"
          ]
        },
        "protectedSettings": {
             "commandToExecute": "[concat('mkdir /config/cloud && cp f5-cloud-libs.tar.gz* /config/cloud; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null /config/cloud/passwd; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', parameters('adminPassword'), ' >> /config/cloud/passwd; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/cloud/f5-cloud-libs/scripts/onboard.js --output /var/log/onboard.log --log-level debug --host ', concat(variables('ipAddress'), 4), ' -u admin --password-url file:///config/cloud/passwd --hostname ', concat(variables('deviceNamePrefix'), 0, '.azuresecurity.com'), ' --license ', parameters('licenseKey1'), ' --db provision.1nicautoconfig:disable --db tmm.maxremoteloglength:2048 --module ltm:nominal --module asm:none --module afm:none; /usr/bin/f5-rest-node /config/cloud/f5-cloud-libs/scripts/cluster.js --output /var/log/cluster.log --log-level debug --host ', concat(variables('ipAddress'), 4), ' -u admin --password-url file:///config/cloud/passwd --config-sync-ip ', concat(variables('ipAddress'), 4), ' --create-group --device-group Sync --sync-type sync-failover --device ', concat(variables('deviceNamePrefix'), 0, '.azuresecurity.com'), ' --auto-sync --save-on-auto-sync; rm -f /config/cloud/passwd')]"
        }
      }
     },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "copy": {
        "name": "extensionLoop",
        "count": "[sub(parameters('numberOfInstances'), 1)]"
      },
      "name": "[concat(variables('deviceNamePrefix'),add(copyindex(),1),'/start')]",
      "apiVersion": "2016-03-30",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('deviceNamePrefix'),add(copyindex(),1))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]"
          ]
        },
      "protectedSettings": {
           "commandToExecute": "[concat('mkdir /config/cloud && cp f5-cloud-libs.tar.gz* /config/cloud; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null /config/cloud/passwd; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', parameters('adminPassword'), ' >> /config/cloud/passwd; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/cloud/f5-cloud-libs/scripts/onboard.js --output /var/log/onboard.log --log-level debug --host ', concat(variables('ipAddress'), 5), ' -u admin --password-url file:///config/cloud/passwd --hostname ', concat(variables('deviceNamePrefix'), copyindex(1), '.azuresecurity.com'), ' --license ', parameters('licenseKey2'), ' --db provision.1nicautoconfig:disable --db tmm.maxremoteloglength:2048 --module ltm:nominal --module asm:none --module afm:none; /usr/bin/f5-rest-node /config/cloud/f5-cloud-libs/scripts/cluster.js --output /var/log/cluster.log --log-level debug --host ', concat(variables('ipAddress'), 5), ' -u admin --password-url file:///config/cloud/passwd --config-sync-ip ', concat(variables('ipAddress'), 5), ' --join-group --device-group Sync --sync --remote-host ', concat(variables('ipAddress'), 4), ' --remote-user admin --remote-password-url file:///config/cloud/passwd; rm -f /config/cloud/passwd')]"
        }
      }
    }
  ],
  "outputs": {
    "GUI-URL": {
      "type": "string",
      "value": "[concat('https://',reference(variables('publicIPID')).dnsSettings.fqdn,':8443')]"
    },
    "SSH-URL": {
      "type": "string",
      "value": "[concat(reference(variables('publicIPID')).dnsSettings.fqdn,' ',8022)]"
    }
  }
}